global
        log /dev/log local0
        log /dev/log local1 notice
        #log loghost    local0 info
        maxconn 4096
        #chroot /var/lib/haproxy
        uid 99
        gid 99
        daemon
        #debug
        #quiet

	# Default ciphers to use on SSL-enabled listening sockets.
	ssl-default-bind-ciphers 	ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!eNULL:!MD5:!DSS
	ssl-default-bind-options 	no-sslv3 no-tls-tickets force-tlsv12

	spread-checks 4
	tune.maxrewrite 1024
	tune.ssl.default-dh-param 2048

        stats socket /var/run/haproxy.sock mode 600 level admin
        stats timeout 2m #Wait up to 2 minutes for input

defaults
        mode    http
        log     global

        option  httplog
        option  dontlognull

        retries 3
        option  redispatch

        maxconn 2000
        timeout queue           1m
        timeout connect         10s
        timeout server          30s
	timeout check           10s
        timeout tunnel          3600s
	timeout http-request    10s
	timeout client          20s
	timeout http-keep-alive 15s

frontend http-in
	bind *:80
	bind :::80

        use_backend letsencrypt if { path_beg /.well-known/acme-challenge/ }
	default_backend nodes-http

frontend https-in
	mode tcp
	bind *:443 ssl crt /www/cert/dummy.pem alpn h2,http/1.1
	bind :::443 ssl crt /www/cert/dummy.pem alpn h2,http/1.1
	# http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"
	use_backend nodes-http2 if { ssl_fc_alpn -i h2 }
	default_backend nodes-http

backend nodes-http
        redirect scheme https code 301 if !{ ssl_fc }
	server local 127.0.0.1:8080 check send-proxy

backend nodes-http2
	mode tcp
	# http-request add-header X-Forwarded-Proto https
	server local 127.0.0.1:8081 check send-proxy

backend munin   # get info for munin without secure http
        acl local_net src 192.168.0.0/24
        http-request allow if local_net
	http-request deny
        server local 127.0.0.1:8080 send-proxy

backend letsencrypt
        server letsencrypt 127.0.0.1:402
